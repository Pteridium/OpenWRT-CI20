diff -urN a/drivers/net/ethernet/davicom/dm9000.c b/drivers/net/ethernet/davicom/dm9000.c
--- a/drivers/net/ethernet/davicom/dm9000.c	2014-11-09 23:55:29.000000000 +0100
+++ b/drivers/net/ethernet/davicom/dm9000.c	2014-11-19 13:29:06.981297438 +0100
@@ -36,6 +36,9 @@
 #include <linux/platform_device.h>
 #include <linux/irq.h>
 #include <linux/slab.h>
+#include <linux/regulator/consumer.h>
+#include <linux/gpio.h>
+#include <linux/of_gpio.h>
 
 #include <asm/delay.h>
 #include <asm/irq.h>
@@ -1426,11 +1429,41 @@
 	struct dm9000_plat_data *pdata = dev_get_platdata(&pdev->dev);
 	struct board_info *db;	/* Point a board information structure */
 	struct net_device *ndev;
+	struct device *dev = &pdev->dev;
 	const unsigned char *mac_src;
 	int ret = 0;
 	int iosize;
 	int i;
 	u32 id_val;
+	int reset_gpio;
+	enum of_gpio_flags flags;
+	struct regulator *power;
+
+	power = devm_regulator_get(dev, "vcc");
+	if (IS_ERR(power)) {
+		dev_dbg(dev, "no regulator provided\n");
+	} else if (!regulator_is_enabled(power)) {
+		ret = regulator_enable(power);
+		dev_dbg(dev, "regulator enabled\n");
+	}
+
+	reset_gpio = of_get_named_gpio_flags(dev->of_node, "reset-gpio", 0,
+					     &flags);
+	if (gpio_is_valid(reset_gpio)) {
+		ret = devm_gpio_request_one(dev, reset_gpio, flags,
+					    "dm9000_reset");
+		if (ret) {
+			dev_err(dev, "failed to request reset gpio %d: %d\n",
+				reset_gpio, ret);
+		} else {
+			gpio_direction_output(reset_gpio, 0);
+			/* According to manual PWRST# Low Period Min 1ms */
+			msleep(2);
+			gpio_direction_output(reset_gpio, 1);
+			/* Needs 3ms to read eeprom when PWRST is deasserted */
+			msleep(4);
+		}
+	}
 
 	if (!pdata) {
 		pdata = dm9000_parse_dt(&pdev->dev);
